<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:

use Exception as Exception; // a common import

class boombit extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'boombit',
            'name' => 'BoomBit',
            'countries' => array ( 'KR' ),
            'comment' => 'BoomBit API',
            'has' => array (
                'fetchTicker' => true,
                'fetchOHLCV' => true,
                'fetchOrderBook' => true,
                'fetchTrades' => true,
                'fetchMyTrades' => true,
                'fetchOrderBooks' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'createOrder' => true,
                'cancelOrder' => true,
                'fetchBalance' => true,
            ),
            'timeframes' => array (
                '1m' => '1MIN',
                '5m' => '5MIN',
                '15m' => '15MIN',
                '30m' => '30MIN',
                '1h' => '1H',
                '2h' => '2H',
                '4h' => '4H',
                '6h' => '6H',
                '12h' => '12H',
                '1d' => 'D',
                '2d' => '2D',
                '1w' => 'W',
                'month' => 'MONTH',
            ),
            'urls' => array (
                'logo' => 'https://maintain.boombit.co.kr/images/logo_icon.png',
                'api' => 'https://api.boombit.co.kr',
                'www' => 'https://maintain.boombit.co.kr/bm/home',
                'doc' => '',
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'GET/v1/api/ticker',
                        'GET/v1/api/kline',
                        'GET/v1/api/depth',
                        'GET/v1/api/trades',
                    ),
                ),
                'private' => array (
                    'get' => array (
                        'GET/v1/api/orderdetail',
                        'GET/v1/api/auth/wallet',
                        'GET/v1/api/mineLimit',
                    ),
                    'post' => array (
                        'POST/v1/api/trades',
                        'POST/v1/api/orders',
                        'POST/v1/api/auth/orders',
                        'POST/v1/api/cancelOrder',
                        'POST/v1/api/placeOrder',
                    ),
                ),
            ),
        ));
    }

    public function fetch_markets () {
        return array (
            array ( 'id' => 'BTC_KRW', 'symbol' => 'BTC_KRW', 'base' => 'KRW', 'quote' => 'BTC' ),
            array ( 'id' => 'ETH_KRW', 'symbol' => 'ETH_KRW', 'base' => 'KRW', 'quote' => 'ETH' ),
            array ( 'id' => 'XRP_KRW', 'symbol' => 'XRP_KRW', 'base' => 'KRW', 'quote' => 'XRP' ),
            array ( 'id' => 'ETH_BTC', 'symbol' => 'ETH_BTC', 'base' => 'BTC', 'quote' => 'ETH' ),
            array ( 'id' => 'XRP_BTC', 'symbol' => 'XRP_BTC', 'base' => 'BTC', 'quote' => 'XRP' ),
            array ( 'id' => 'BM_BTC', 'symbol' => 'BM_BTC', 'base' => 'BTC', 'quote' => 'BM' ),
            array ( 'id' => 'BM_KRW', 'symbol' => 'BM_KRW', 'base' => 'KRW', 'quote' => 'BM' ),
        );
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetGETV1ApiAuthWallet ($params);
        $result = array ( 'info' => $response );
        $free = $response['data']['free'];
        $freezed = $response['data']['freezed'];
        foreach($free as $key=>$value)
        {
            $coin_type = $key;
            $account = $this->account ();
            $account['free'] = $value;
            $account['used'] = $freezed[$coin_type];
            $account['total'] = $this->sum ($account['free'], $account['used']);
            $result[$coin_type] = $account;
        }
        return $this->parse_balance($result);
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
    	$this->load_markets();
        $response = $this->publicGetGETV1ApiDepth (array_merge (array (
            'pair' => $this->market_id($symbol),
        ), $params));
        return $this->parse_order_book($response['data'], $response['data']['timestamp']);
    }

    public function fetch_ticker ($symbol, $params = array ()) {
    	$this->load_markets();
        $response = $this->publicGetGETV1ApiTicker (array_merge (array (
            'pair' => $this->market_id($symbol),
        ), $params));
        $ticker = $response['data'];
        $last = $this->safe_float($ticker, 'last');
        return array (
            'symbol' => $symbol,
            'timestamp' => $ticker['timestamp'],
            'datetime' => $this->iso8601 ($ticker['timestamp']),
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $this->safe_float($ticker, 'dchange'),
            'percentage' => $this->safe_float($ticker, 'dchangepec'),
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => $this->safe_float($ticker, 'vol'),
            'info' => $ticker,
        );
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1d', $since = null, $limit = null, $params = array ()) {
    	$this->load_markets();
        $market = $this->market ($symbol);
        $response = $this->publicGetGETV1ApiKline (array_merge (array (
            'pair' => $market['id'],
            'type' => $this->timeframes[$timeframe],
        ), $params));
        $ohlcvs = $response['data'];
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function parse_trade ($trade, $market) {
    	$side = 'sell';
    	$price = (float) $trade[1];
    	$epsilon = 0.00000000001;
    	if($price > $epsilon)
    		$side = 'buy';
        $timestamp = $trade[3];
        $fee_num = null;
        if( count($trade) >=7 )
        	$fee_num = (float) $trade[6];
        return array (
            'id' => $trade[0],
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $trade[5],
            'order' => null,
            'type' => $trade[4],
            'side' => $side,
            'price' => $price,
            'amount' => (float) $trade[2],
            'fee' => $fee_num,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
    	$this->load_markets();
        $market = $this->market ($symbol);
        $response = $this->publicGetGETV1ApiTrades (array_merge (array (
            'pair' => $market['id'],
        ), $params));
        $trades = $response['data'];
        $new_trade = array();
        $num = count($trades); 
		for($i=0;$i<$num;++$i)
		{
			$one_trade = array();
			$count = count($trades[$i]);
			for($k = 0; $k < $count; ++$k)
				array_push($one_trade, $trades[$i][$k]);

			array_push($one_trade, $symbol);
			array_push($new_trade, $one_trade);
		} 
        return $this->parse_trades($new_trade, $market, $since, $limit);
    }

    public function fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ()) {
    	$this->load_markets();
        $response = $this->privatePostPOSTV1ApiTrades ($params);
        $trades = $response['data'];
        $new_trade = array();
        $num = count($trades); 
		for($i=0;$i<$num;++$i)
		{
			$one_trade = array();
			array_push($one_trade, $trades[$i][0]);
			array_push($one_trade, $trades[$i][3]);
			array_push($one_trade, $trades[$i][4]);
			array_push($one_trade, $trades[$i][2]);
			array_push($one_trade, $trades[$i][6]);
			array_push($one_trade, $trades[$i][1]);
			array_push($one_trade, $trades[$i][8]);
			array_push($new_trade, $one_trade);
		} 
        return $this->parse_trades($new_trade, null, $since, $limit);
    }

    public function parse_order_status ($status) {
        $statuses = array (
            '0' => 'Start',
            '1' => 'Partially Executed',
            '2' => 'Executed',
            '3' => 'Cancelled',
        );
        if (is_array ($statuses) && array_key_exists ($status, $statuses)) {
            return $statuses[$status];
        }
        return $status;
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array (
            'order_id' => $id,
        );
        $response = $this->privateGetGETV1ApiOrderdetail (array_merge ($request, $params));
        $order = $response['data'];
        $timestamp = $order[2];
        $status = $this->parse_order_status($order[9]);
        $total = (float) $order[4];
        $completed = (float) $order[3];
        $remain = $total - $completed;
        $side = 'sell';
        $price = (float) $order[5];
        if ($price > 0.000000000001)
            $side = 'buy';
        $result = array (
            'info' => $order,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $order[1],
            'type' => $order[7],
            'side' => $side,
            'price' => $price,
            'cost' => null,
            'average' => $order[6],
            'amount' => $total,
            'filled' => $completed,
            'remaining' => $remain,
            'status' => $status,
            'fee' => null,
            'stop_price' => $order[8],
        );
        return $result;
    }

    public function fetch_order_books ($symbol = null, $params = array ()) {
		$this->load_markets();
        $response = $this->privatePostPOSTV1ApiOrders ($params);
        return $this->parse_orders ($response['data'], null, null, null);
    }

    public function parse_order ($order, $market = null) {
        $id = $order[0];
        $timestamp = $order[2];
        $symbol = $order[1];
		$filled = (float) $order[3];
        $amount = (float) $order[4];
		$side = 'sell';
		$price = (float) $order[5];
		if($price > 0.00000000000000001)
            $side = 'buy';
        $remaining = $amount - $filled;
		$tradePrice = (float) $order[6];
		$cost = $filled * $tradePrice;
        $type = $order[7];
		$stopPrice = (float) $order[8];
        $status = $this->parse_order_status ($order[9]);

        return array (
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'cost' => $cost,
            'average' => null,
            'fee' => null,
            'stop_price' => $stopPrice,
            'info' => $order,
        );
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array()) {
		$this->load_markets();
        $response = $this->privatePostPOSTV1ApiAuthOrders ();
        return $this->parse_orders ($response['data'], null, $since, $limit);
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
    	$this->load_markets();
        $order = array (
            'isbid' => $side,
            'order_type' => $type,
            'pair' => $this->market_id($symbol),
            'amount' => $amount,
        );
        if ($type === 'STOP-LIMIT')
            $order['stop_price'] = $price;
        else
        	$order['stop_price'] = 0;

        $result = $this->privatePostPOSTV1ApiPlaceOrder (array_merge ($order, $params));
        return array (
            'info' => $result,
            'id' => $result['data']['orderId'],
        );
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
    	if ($symbol === null)
            throw new ExchangeError ($this->id . ' cancelOrder() requires a symbol argument');
        $this->load_markets();
        return $this->privatePostPOSTV1ApiCancelOrder (array_merge (array (
            'order_id' => $id,
            'pair' => $this->market_id($symbol),
        ), $params));
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        if ($this->id === 'cryptocapital')
            throw new ExchangeError ($this->id . ' is an abstract base API for boombit');
        $url = $this->urls['api'] . '/' . $path;
        if ($api === 'public') {
            if ($params)
                $url .= '?' . $this->urlencode ($params);
        } else {
            $this->check_required_credentials();
            $time = (string) $this->milliseconds ();
            $query = $this->keysort (array_merge ($params, array (
                'api_key' => $this->apiKey,
                'auth_nonce' => $time,
            )));

            $auth = '';
            $keys = is_array ($query) ? array_keys ($query) : array ();
            for ($i = 0; $i < count ($keys); $i++) {
                $key = $keys[$i];
                $auth .= (string) $query[$key];
            }

            $signed = $this->hash($this->encode($auth . $this->secret));
            if($method === 'GET')
                $signed = $this->hash($this->encode($this->apiKey . $time . $this->secret));
            
            $query_str = $this->urlencode($query);
            $url .= '?' . $query_str . '&auth_sign=' . $signed;
            $headers = array ( 'Content-Type' => 'application/json' );
        }
        return array ( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function request ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $response = $this->fetch2 ($path, $api, $method, $params, $headers, $body);
        if (is_array ($response) && array_key_exists ('msg', $response))
            if ($response['msg'])
                throw new ExchangeError ($this->id . ' ' . $this->json ($response));
        return $response;
    }
}
